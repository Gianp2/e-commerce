{"ast":null,"code":"\"use client\";\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n// src/InView.tsx\nimport * as React from \"react\";\n\n// src/observe.ts\nvar observerMap = /* @__PURE__ */new Map();\nvar RootIds = /* @__PURE__ */new WeakMap();\nvar rootId = 0;\nvar unsupportedValue;\nfunction defaultFallbackInView(inView) {\n  unsupportedValue = inView;\n}\nfunction getRootId(root) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\nfunction optionsToId(options) {\n  return Object.keys(options).sort().filter(key => options[key] !== void 0).map(key => {\n    return `${key}_${key === \"root\" ? getRootId(options.root) : options[key]}`;\n  }).toString();\n}\nfunction createObserver(options) {\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n  if (!instance) {\n    const elements = /* @__PURE__ */new Map();\n    let thresholds;\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        var _a2;\n        const inView = entry.isIntersecting && thresholds.some(threshold => entry.intersectionRatio >= threshold);\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          entry.isVisible = inView;\n        }\n        (_a2 = elements.get(entry.target)) == null ? void 0 : _a2.forEach(callback => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n    thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [options.threshold || 0]);\n    instance = {\n      id,\n      observer,\n      elements\n    };\n    observerMap.set(id, instance);\n  }\n  return instance;\n}\nfunction observe(element, callback, options = {}, fallbackInView = unsupportedValue) {\n  if (typeof window.IntersectionObserver === \"undefined\" && fallbackInView !== void 0) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio: typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds\n    });\n    return () => {};\n  }\n  const {\n    id,\n    observer,\n    elements\n  } = createObserver(options);\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n  callbacks.push(callback);\n  observer.observe(element);\n  return function unobserve() {\n    callbacks.splice(callbacks.indexOf(callback), 1);\n    if (callbacks.length === 0) {\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n    if (elements.size === 0) {\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n\n// src/InView.tsx\nfunction isPlainChildren(props) {\n  return typeof props.children !== \"function\";\n}\nvar InView = class extends React.Component {\n  constructor(props) {\n    super(props);\n    __publicField(this, \"node\", null);\n    __publicField(this, \"_unobserveCb\", null);\n    __publicField(this, \"lastInView\");\n    __publicField(this, \"handleNode\", node => {\n      if (this.node) {\n        this.unobserve();\n        if (!node && !this.props.triggerOnce && !this.props.skip) {\n          this.setState({\n            inView: !!this.props.initialInView,\n            entry: void 0\n          });\n          this.lastInView = this.props.initialInView;\n        }\n      }\n      this.node = node ? node : null;\n      this.observeNode();\n    });\n    __publicField(this, \"handleChange\", (inView, entry) => {\n      const previousInView = this.lastInView;\n      this.lastInView = inView;\n      if (previousInView === void 0 && !inView) {\n        return;\n      }\n      if (inView && this.props.triggerOnce) {\n        this.unobserve();\n      }\n      if (!isPlainChildren(this.props)) {\n        this.setState({\n          inView,\n          entry\n        });\n      }\n      if (this.props.onChange) {\n        this.props.onChange(inView, entry);\n      }\n    });\n    this.state = {\n      inView: !!props.initialInView,\n      entry: void 0\n    };\n    this.lastInView = props.initialInView;\n  }\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n  componentWillUnmount() {\n    this.unobserve();\n  }\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView\n    } = this.props;\n    if (this.lastInView === void 0) {\n      this.lastInView = this.props.initialInView;\n    }\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold,\n      root,\n      rootMargin,\n      // @ts-expect-error\n      trackVisibility,\n      delay\n    }, fallbackInView);\n  }\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n  render() {\n    const {\n      children\n    } = this.props;\n    if (typeof children === \"function\") {\n      const {\n        inView,\n        entry\n      } = this.state;\n      return children({\n        inView,\n        entry,\n        ref: this.handleNode\n      });\n    }\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n    return React.createElement(as || \"div\", {\n      ref: this.handleNode,\n      ...props\n    }, children);\n  }\n};\n\n// src/useInView.tsx\nimport * as React2 from \"react\";\nfunction useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange\n} = {}) {\n  var _a2;\n  const [ref, setRef] = React2.useState(null);\n  const callback = React2.useRef(onChange);\n  const lastInViewRef = React2.useRef(initialInView);\n  const [state, setState] = React2.useState({\n    inView: !!initialInView,\n    entry: void 0\n  });\n  callback.current = onChange;\n  React2.useEffect(() => {\n    if (lastInViewRef.current === void 0) {\n      lastInViewRef.current = initialInView;\n    }\n    if (skip || !ref) return;\n    let unobserve;\n    unobserve = observe(ref, (inView, entry) => {\n      const previousInView = lastInViewRef.current;\n      lastInViewRef.current = inView;\n      if (previousInView === void 0 && !inView) {\n        return;\n      }\n      setState({\n        inView,\n        entry\n      });\n      if (callback.current) callback.current(inView, entry);\n      if (entry.isIntersecting && triggerOnce && unobserve) {\n        unobserve();\n        unobserve = void 0;\n      }\n    }, {\n      root,\n      rootMargin,\n      threshold,\n      // @ts-expect-error\n      trackVisibility,\n      delay\n    }, fallbackInView);\n    return () => {\n      if (unobserve) {\n        unobserve();\n      }\n    };\n  },\n  // We break the rule here, because we aren't including the actual `threshold` variable\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [\n  // If the threshold is an array, convert it to a string, so it won't change between renders.\n  Array.isArray(threshold) ? threshold.toString() : threshold, ref, root, rootMargin, triggerOnce, skip, trackVisibility, fallbackInView, delay]);\n  const entryTarget = (_a2 = state.entry) == null ? void 0 : _a2.target;\n  const previousEntryTarget = React2.useRef(void 0);\n  if (!ref && entryTarget && !triggerOnce && !skip && previousEntryTarget.current !== entryTarget) {\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: void 0\n    });\n    lastInViewRef.current = initialInView;\n  }\n  const result = [setRef, state.inView, state.entry];\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n  return result;\n}\n\n// src/useOnInView.tsx\nimport * as React3 from \"react\";\nvar _a, _b;\nvar useSyncEffect = (_b = (_a = React3.useInsertionEffect) != null ? _a : React3.useLayoutEffect) != null ? _b : React3.useEffect;\nvar useOnInView = (onIntersectionChange, {\n  threshold,\n  root,\n  rootMargin,\n  trackVisibility,\n  delay,\n  triggerOnce,\n  skip\n} = {}) => {\n  const onIntersectionChangeRef = React3.useRef(onIntersectionChange);\n  const observedElementRef = React3.useRef(null);\n  const observerCleanupRef = React3.useRef(void 0);\n  const lastInViewRef = React3.useRef(void 0);\n  useSyncEffect(() => {\n    onIntersectionChangeRef.current = onIntersectionChange;\n  }, [onIntersectionChange]);\n  return React3.useCallback(element => {\n    const cleanupExisting = () => {\n      if (observerCleanupRef.current) {\n        const cleanup = observerCleanupRef.current;\n        observerCleanupRef.current = void 0;\n        cleanup();\n      }\n    };\n    if (element === observedElementRef.current) {\n      return observerCleanupRef.current;\n    }\n    if (!element || skip) {\n      cleanupExisting();\n      observedElementRef.current = null;\n      lastInViewRef.current = void 0;\n      return;\n    }\n    cleanupExisting();\n    observedElementRef.current = element;\n    let destroyed = false;\n    const destroyObserver = observe(element, (inView, entry) => {\n      const previousInView = lastInViewRef.current;\n      lastInViewRef.current = inView;\n      if (previousInView === void 0 && !inView) {\n        return;\n      }\n      onIntersectionChangeRef.current(inView, entry);\n      if (triggerOnce && inView) {\n        stopObserving();\n      }\n    }, {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay\n    });\n    function stopObserving() {\n      if (destroyed) return;\n      destroyed = true;\n      destroyObserver();\n      observedElementRef.current = null;\n      observerCleanupRef.current = void 0;\n      lastInViewRef.current = void 0;\n    }\n    observerCleanupRef.current = stopObserving;\n    return observerCleanupRef.current;\n  }, [Array.isArray(threshold) ? threshold.toString() : threshold, root, rootMargin, trackVisibility, delay, triggerOnce, skip]);\n};\nexport { InView, defaultFallbackInView, observe, useInView, useOnInView };","map":{"version":3,"names":["React","observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","defaultFallbackInView","inView","getRootId","root","has","get","set","toString","optionsToId","options","Object","keys","sort","filter","key","map","createObserver","id","instance","elements","thresholds","observer","IntersectionObserver","entries","forEach","entry","_a2","isIntersecting","some","threshold","intersectionRatio","trackVisibility","isVisible","target","callback","Array","isArray","observe","element","fallbackInView","window","bounds","getBoundingClientRect","time","boundingClientRect","intersectionRect","rootBounds","callbacks","push","unobserve","splice","indexOf","length","delete","size","disconnect","isPlainChildren","props","children","InView","Component","constructor","__publicField","node","triggerOnce","skip","setState","initialInView","lastInView","observeNode","previousInView","onChange","state","componentDidMount","componentDidUpdate","prevProps","rootMargin","delay","componentWillUnmount","_unobserveCb","handleChange","render","ref","handleNode","as","createElement","React2","useInView","setRef","useState","useRef","lastInViewRef","current","useEffect","entryTarget","previousEntryTarget","result","React3","_a","_b","useSyncEffect","useInsertionEffect","useLayoutEffect","useOnInView","onIntersectionChange","onIntersectionChangeRef","observedElementRef","observerCleanupRef","useCallback","cleanupExisting","cleanup","destroyed","destroyObserver","stopObserving"],"sources":["C:\\Users\\gianp\\OneDrive\\Escritorio\\Tienda\\node_modules\\react-intersection-observer\\src\\InView.tsx","C:\\Users\\gianp\\OneDrive\\Escritorio\\Tienda\\node_modules\\react-intersection-observer\\src\\observe.ts","C:\\Users\\gianp\\OneDrive\\Escritorio\\Tienda\\node_modules\\react-intersection-observer\\src\\useInView.tsx","C:\\Users\\gianp\\OneDrive\\Escritorio\\Tienda\\node_modules\\react-intersection-observer\\src\\useOnInView.tsx"],"sourcesContent":["import * as React from \"react\";\nimport type { IntersectionObserverProps, PlainChildrenProps } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== \"function\";\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n  lastInView: boolean | undefined;\n\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n    this.lastInView = props.initialInView;\n  }\n\n  componentDidMount() {\n    this.unobserve();\n    this.observeNode();\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    if (this.lastInView === undefined) {\n      this.lastInView = this.props.initialInView;\n    }\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-expect-error\n        trackVisibility,\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n        this.lastInView = this.props.initialInView;\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    const previousInView = this.lastInView;\n    this.lastInView = inView;\n\n    // Ignore the very first `false` notification so consumers only hear about actual state changes.\n    if (previousInView === undefined && !inView) {\n      return;\n    }\n\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    const { children } = this.props;\n    if (typeof children === \"function\") {\n      const { inView, entry } = this.state;\n      return children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props as PlainChildrenProps;\n\n    return React.createElement(\n      as || \"div\",\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import type { ObserverInstanceCallback } from \"./index\";\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit[\"root\"]) {\n  if (!root) return \"0\";\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter(\n      (key) => options[key as keyof IntersectionObserverInit] !== undefined,\n    )\n    .map((key) => {\n      return `${key}_${\n        key === \"root\"\n          ? getRootId(options.root)\n          : options[key as keyof IntersectionObserverInit]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  const id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-expect-error support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === \"undefined\") {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-expect-error\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === \"undefined\" &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === \"number\" ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  const callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from \"react\";\nimport type { IntersectionOptions, InViewHookResponse } from \"./index\";\nimport { observe } from \"./observe\";\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions[\"onChange\"]>(onChange);\n  const lastInViewRef = React.useRef<boolean | undefined>(initialInView);\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: threshold is not correctly detected as a dependency\n  React.useEffect(\n    () => {\n      if (lastInViewRef.current === undefined) {\n        lastInViewRef.current = initialInView;\n      }\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          const previousInView = lastInViewRef.current;\n          lastInViewRef.current = inView;\n\n          // Ignore the very first `false` notification so consumers only hear about actual state changes.\n          if (previousInView === undefined && !inView) {\n            return;\n          }\n\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-expect-error\n          trackVisibility,\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n  const previousEntryTarget = React.useRef<Element | undefined>(undefined);\n  if (\n    !ref &&\n    entryTarget &&\n    !triggerOnce &&\n    !skip &&\n    previousEntryTarget.current !== entryTarget\n  ) {\n    // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n    // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n    previousEntryTarget.current = entryTarget;\n    setState({\n      inView: !!initialInView,\n      entry: undefined,\n    });\n    lastInViewRef.current = initialInView;\n  }\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n","import * as React from \"react\";\nimport type {\n  IntersectionChangeEffect,\n  IntersectionEffectOptions,\n} from \"./index\";\nimport { observe } from \"./observe\";\n\nconst useSyncEffect =\n  (\n    React as typeof React & {\n      useInsertionEffect?: typeof React.useEffect;\n    }\n  ).useInsertionEffect ??\n  React.useLayoutEffect ??\n  React.useEffect;\n\n/**\n * React Hooks make it easy to monitor when elements come into and leave view. Call\n * the `useOnInView` hook with your callback and (optional) [options](#options).\n * It will return a ref callback that you can assign to the DOM element you want to monitor.\n * When the element enters or leaves the viewport, your callback will be triggered.\n *\n * This hook triggers no re-renders, and is useful for performance-critical use-cases or\n * when you need to trigger render independent side effects like tracking or logging.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useOnInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const inViewRef = useOnInView((inView, entry) => {\n *     if (inView) {\n *       console.log(\"Element is in view\", entry.target);\n *     } else {\n *       console.log(\"Element left view\", entry.target);\n *     }\n *   });\n *\n *   return (\n *     <div ref={inViewRef}>\n *       <h2>This element is being monitored</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport const useOnInView = <TElement extends Element>(\n  onIntersectionChange: IntersectionChangeEffect<TElement>,\n  {\n    threshold,\n    root,\n    rootMargin,\n    trackVisibility,\n    delay,\n    triggerOnce,\n    skip,\n  }: IntersectionEffectOptions = {},\n) => {\n  const onIntersectionChangeRef = React.useRef(onIntersectionChange);\n  const observedElementRef = React.useRef<TElement | null>(null);\n  const observerCleanupRef = React.useRef<(() => void) | undefined>(undefined);\n  const lastInViewRef = React.useRef<boolean | undefined>(undefined);\n\n  useSyncEffect(() => {\n    onIntersectionChangeRef.current = onIntersectionChange;\n  }, [onIntersectionChange]);\n\n  // biome-ignore lint/correctness/useExhaustiveDependencies: Threshold arrays are normalized inside the callback\n  return React.useCallback(\n    (element: TElement | undefined | null) => {\n      // React <19 never calls ref callbacks with `null` during unmount, so we\n      // eagerly tear down existing observers manually whenever the target changes.\n      const cleanupExisting = () => {\n        if (observerCleanupRef.current) {\n          const cleanup = observerCleanupRef.current;\n          observerCleanupRef.current = undefined;\n          cleanup();\n        }\n      };\n\n      if (element === observedElementRef.current) {\n        return observerCleanupRef.current;\n      }\n\n      if (!element || skip) {\n        cleanupExisting();\n        observedElementRef.current = null;\n        lastInViewRef.current = undefined;\n        return;\n      }\n\n      cleanupExisting();\n\n      observedElementRef.current = element;\n      let destroyed = false;\n\n      const destroyObserver = observe(\n        element,\n        (inView, entry) => {\n          const previousInView = lastInViewRef.current;\n          lastInViewRef.current = inView;\n\n          // Ignore the very first `false` notification so consumers only hear about actual state changes.\n          if (previousInView === undefined && !inView) {\n            return;\n          }\n\n          onIntersectionChangeRef.current(\n            inView,\n            entry as IntersectionObserverEntry & { target: TElement },\n          );\n          if (triggerOnce && inView) {\n            stopObserving();\n          }\n        },\n        {\n          threshold,\n          root,\n          rootMargin,\n          trackVisibility,\n          delay,\n        } as IntersectionObserverInit,\n      );\n\n      function stopObserving() {\n        // Centralized teardown so both manual destroys and React ref updates share\n        // the same cleanup path (needed for React versions that never call the ref with `null`).\n        if (destroyed) return;\n        destroyed = true;\n        destroyObserver();\n        observedElementRef.current = null;\n        observerCleanupRef.current = undefined;\n        lastInViewRef.current = undefined;\n      }\n\n      observerCleanupRef.current = stopObserving;\n\n      return observerCleanupRef.current;\n    },\n    [\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      triggerOnce,\n      skip,\n    ],\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}